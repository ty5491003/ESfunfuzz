function apiNameTransform(apiName) {
    // 将姚厚友给的API名称，转化为 ES标准的id
    apiName = apiName.replace('()', '');
    apiName = apiName.toLowerCase();
    apiName = 'sec-' + apiName;
    return apiName;
}

var oneToOneApiList = [
'Array.from()',
'Array.isArray()',
'Array.observe()',
'Array.of()',
'Array.unobserve()',
'ArrayBuffer.isView()',
'ArrayBuffer.transfer()',
'Atomics.add()',
'Atomics.and()',
'Atomics.compareExchange()',
'Atomics.exchange()',
'Atomics.isLockFree()',
'Atomics.load()',
'Atomics.notify()',
'Atomics.or()',
'Atomics.store()',
'Atomics.wait()',
'getBigInt64()',
'Date.UTC()',
'Date.now()',
'Date.parse()',
'Intl.getCanonicalLocales()',
'JSON.parse()',
'JSON.stringify()',
'Math.abs()',
'Math.acos()',
'Math.acosh()',
'Math.asin()',
'Math.asinh()',
'Math.atan()',
'Math.atan2()',
'Math.atanh()',
'Math.cbrt()',
'Math.ceil()',
'Math.clz32()',
'Math.cos()',
'Math.cosh()',
'Math.exp()',
'Math.expm1()',
'Math.floor()',
'Math.fround()',
'Math.hypot()',
'Math.imul()',
'Math.log()',
'Math.log10()',
'Math.log1p()',
'Math.log2()',
'Math.max()',
'Math.min()',
'Math.pow()',
'Math.random()',
'Math.round()',
'Math.sign()',
'Math.sin()',
'Math.sinh()',
'Math.sqrt()',
'Math.tan()',
'Math.tanh()',
'Math.trunc()',
'Number.isFinite()',
'Number.isInteger()',
'Number.isNaN()',
'Number.isSafeInteger()',
'Number.parseFloat()',
'Number.parseInt()',
'Number.toInteger()',
'Object.assign()',
'Object.create()',
'Object.defineProperties()',
'Object.defineProperty()',
'Object.entries()',
'Object.freeze()',
'Object.fromEntries()',
'Object.getNotifier()',
'Object.getOwnPropertyDescriptor()',
'Object.getOwnPropertyDescriptors()',
'Object.getOwnPropertyNames()',
'Object.getOwnPropertySymbols()',
'Object.getPrototypeOf()',
'Object.is()',
'Object.isExtensible()',
'Object.isFrozen()',
'Object.isSealed()',
'Object.keys()',
'Object.observe()',
'Object.preventExtensions()',
'Object.seal()',
'Object.setPrototypeOf()',
'Object.unobserve()',
'Object.values()',
'Promise.all()',
'Promise.race()',
'Promise.reject()',
'Promise.resolve()',
'Proxy.revocable()',
'handler.apply()',
'handler.construct()',
'handler.defineProperty()',
'handler.deleteProperty()',
'handler.enumerate()',
'handler.get()',
'handler.getOwnPropertyDescriptor()',
'handler.getPrototypeOf()',
'handler.has()',
'handler.isExtensible()',
'handler.ownKeys()',
'handler.preventExtensions()',
'handler.set()',
'handler.setPrototypeOf()',
'Reflect.apply()',
'Reflect.construct()',
'Reflect.defineProperty()',
'Reflect.deleteProperty()',
'Reflect.enumerate()',
'Reflect.get()',
'Reflect.getOwnPropertyDescriptor()',
'Reflect.getPrototypeOf()',
'Reflect.has()',
'Reflect.isExtensible()',
'Reflect.ownKeys()',
'Reflect.preventExtensions()',
'Reflect.set()',
'Reflect.setPrototypeOf()',
'String.fromCharCode()',
'String.fromCodePoint()',
'String.raw()',
'Symbol.for()',
'Symbol.keyFor()',
'TypedArray.from()',
'TypedArray.of()',
'decodeURI()',
'decodeURIComponent()',
'encodeURI()',
'encodeURIComponent()',
'escape()',
'eval()',
'isFinite()',
'isNaN()',
'unescape()',
'uneval()',
'Array.prototype.concat()',
'Array.prototype.copyWithin()',
'Array.prototype.entries()',
'Array.prototype.every()',
'Array.prototype.fill()',
'Array.prototype.filter()',
'Array.prototype.find()',
'Array.prototype.findIndex()',
'Array.prototype.flat()',
'Array.prototype.flatMap()',
'Array.prototype.forEach()',
'Array.prototype.includes()',
'Array.prototype.indexOf()',
'Array.prototype.join()',
'Array.prototype.keys()',
'Array.prototype.lastIndexOf()',
'Array.prototype.map()',
'Array.prototype.pop()',
'Array.prototype.push()',
'Array.prototype.reduce()',
'Array.prototype.reduceRight()',
'Array.prototype.reverse()',
'Array.prototype.shift()',
'Array.prototype.slice()',
'Array.prototype.some()',
'Array.prototype.sort()',
'Array.prototype.splice()',
'Array.prototype.toLocaleString()',
'Array.prototype.toSource()',
'Array.prototype.toString()',
'Array.prototype.unshift()',
'Array.prototype.values()',
'ArrayBuffer.prototype.slice()',
'Boolean.prototype.toSource()',
'Boolean.prototype.toString()',
'Boolean.prototype.valueOf()',
'DataView.prototype.getFloat32()',
'DataView.prototype.getFloat64()',
'DataView.prototype.getInt16()',
'DataView.prototype.getInt32()',
'DataView.prototype.getInt8()',
'DataView.prototype.getUint16()',
'DataView.prototype.getUint32()',
'DataView.prototype.getUint8()',
'DataView.prototype.setFloat32()',
'DataView.prototype.setFloat64()',
'DataView.prototype.setInt16()',
'DataView.prototype.setInt32()',
'DataView.prototype.setInt8()',
'DataView.prototype.setUint16()',
'DataView.prototype.setUint32()',
'DataView.prototype.setUint8()',
'Date.prototype.getDate()',
'Date.prototype.getDay()',
'Date.prototype.getFullYear()',
'Date.prototype.getHours()',
'Date.prototype.getMilliseconds()',
'Date.prototype.getMinutes()',
'Date.prototype.getMonth()',
'Date.prototype.getSeconds()',
'Date.prototype.getTime()',
'Date.prototype.getTimezoneOffset()',
'Date.prototype.getUTCDate()',
'Date.prototype.getUTCDay()',
'Date.prototype.getUTCFullYear()',
'Date.prototype.getUTCHours()',
'Date.prototype.getUTCMilliseconds()',
'Date.prototype.getUTCMinutes()',
'Date.prototype.getUTCMonth()',
'Date.prototype.getUTCSeconds()',
'Date.prototype.getYear()',
'Date.prototype.setDate()',
'Date.prototype.setFullYear()',
'Date.prototype.setHours()',
'Date.prototype.setMilliseconds()',
'Date.prototype.setMinutes()',
'Date.prototype.setMonth()',
'Date.prototype.setSeconds()',
'Date.prototype.setTime()',
'Date.prototype.setUTCDate()',
'Date.prototype.setUTCFullYear()',
'Date.prototype.setUTCHours()',
'Date.prototype.setUTCMilliseconds()',
'Date.prototype.setUTCMinutes()',
'Date.prototype.setUTCMonth()',
'Date.prototype.setUTCSeconds()',
'Date.prototype.setYear()',
'Date.prototype.toDateString()',
'Date.prototype.toGMTString()',
'Date.prototype.toISOString()',
'Date.prototype.toJSON()',
'Date.prototype.toLocaleDateString()',
'Date.prototype.toLocaleFormat()',
'Date.prototype.toLocaleString()',
'Date.prototype.toLocaleTimeString()',
'Date.prototype.toSource()',
'Date.prototype.toString()',
'Date.prototype.toTimeString()',
'Date.prototype.toUTCString()',
'Date.prototype.valueOf()',
'Error.prototype.toSource()',
'Error.prototype.toString()',
'Function.prototype.apply()',
'Function.prototype.bind()',
'Function.prototype.call()',
'Function.prototype.isGenerator()',
'Function.prototype.toSource()',
'Function.prototype.toString()',
'Generator.prototype.next()',
'Generator.prototype.return()',
'Generator.prototype.throw()',
'Map.prototype.clear()',
'Map.prototype.delete()',
'Map.prototype.entries()',
'Map.prototype.forEach()',
'Map.prototype.get()',
'Map.prototype.has()',
'Map.prototype.keys()',
'Map.prototype.set()',
'Map.prototype.values()',
'Number.prototype.toExponential()',
'Number.prototype.toFixed()',
'Number.prototype.toLocaleString()',
'Number.prototype.toPrecision()',
'Number.prototype.toSource()',
'Number.prototype.toString()',
'Number.prototype.valueOf()',
'Object.prototype.__defineGetter__()',
'Object.prototype.__defineSetter__()',
'Object.prototype.__lookupGetter__()',
'Object.prototype.__lookupSetter__()',
'Object.prototype.eval()',
'Object.prototype.hasOwnProperty()',
'Object.prototype.isPrototypeOf()',
'Object.prototype.propertyIsEnumerable()',
'Object.prototype.toLocaleString()',
'Object.prototype.toSource()',
'Object.prototype.toString()',
'Object.prototype.unwatch()',
'Object.prototype.valueOf()',
'Object.prototype.watch()',
'Promise.prototype.allSettled()',
'Promise.prototype.catch()',
'Promise.prototype.finally()',
'Promise.prototype.then()',
'RegExp.prototype.compile()',
'RegExp.prototype.exec()',
'RegExp.prototype.test()',
'RegExp.prototype.toSource()',
'RegExp.prototype.toString()',
'Set.prototype.add()',
'Set.prototype.clear()',
'Set.prototype.delete()',
'Set.prototype.entries()',
'Set.prototype.forEach()',
'Set.prototype.has()',
'Set.prototype.values()',
'SharedArrayBuffer.prototype.slice()',
'String.prototype.anchor()',
'String.prototype.big()',
'String.prototype.blink()',
'String.prototype.bold()',
'String.prototype.charAt()',
'String.prototype.charCodeAt()',
'String.prototype.codePointAt()',
'String.prototype.concat()',
'String.prototype.endsWith()',
'String.prototype.fixed()',
'String.prototype.fontcolor()',
'String.prototype.fontsize()',
'String.prototype.includes()',
'String.prototype.indexOf()',
'String.prototype.italics()',
'String.prototype.lastIndexOf()',
'String.prototype.link()',
'String.prototype.localeCompare()',
'String.prototype.match()',
'String.prototype.matchAll()',
'String.prototype.normalize()',
'String.prototype.padEnd()',
'String.prototype.padStart()',
'String.prototype.quote()',
'String.prototype.repeat()',
'String.prototype.replace()',
'String.prototype.search()',
'String.prototype.slice()',
'String.prototype.small()',
'String.prototype.split()',
'String.prototype.startsWith()',
'String.prototype.strike()',
'String.prototype.sub()',
'String.prototype.substr()',
'String.prototype.substring()',
'String.prototype.sup()',
'String.prototype.toLocaleLowerCase()',
'String.prototype.toLocaleUpperCase()',
'String.prototype.toLowerCase()',
'String.prototype.toSource()',
'String.prototype.toString()',
'String.prototype.toUpperCase()',
'String.prototype.trim()',
'String.prototype.trimLeft()',
'String.prototype.trimRight()',
'String.prototype.valueOf()',
'Symbol.prototype.toSource()',
'Symbol.prototype.toString()',
'Symbol.prototype.valueOf()',
'TypedArray.prototype.copyWithin()',
'TypedArray.prototype.entries()',
'TypedArray.prototype.every()',
'TypedArray.prototype.fill()',
'TypedArray.prototype.filter()',
'TypedArray.prototype.find()',
'TypedArray.prototype.findIndex()',
'TypedArray.prototype.forEach()',
'TypedArray.prototype.includes()',
'TypedArray.prototype.indexOf()',
'TypedArray.prototype.join()',
'TypedArray.prototype.keys()',
'TypedArray.prototype.lastIndexOf()',
'TypedArray.prototype.map()',
'TypedArray.prototype.move()',
'TypedArray.prototype.reduce()',
'TypedArray.prototype.reduceRight()',
'TypedArray.prototype.reverse()',
'TypedArray.prototype.set()',
'TypedArray.prototype.slice()',
'TypedArray.prototype.some()',
'TypedArray.prototype.sort()',
'TypedArray.prototype.subarray()',
'TypedArray.prototype.toLocaleString()',
'TypedArray.prototype.toString()',
'TypedArray.prototype.values()',
'WeakMap.prototype.clear()',
'WeakMap.prototype.delete()',
'WeakMap.prototype.get()',
'WeakMap.prototype.has()',
'WeakMap.prototype.set()',
'WeakSet.prototype.add()',
'WeakSet.prototype.clear()',
'WeakSet.prototype.delete()',
'WeakSet.prototype.has()',
];

var countMap = new Map();
var patternOfNestedFunction = / [?!]\s?([a-zA-Z]+?)\(/ig;


oneToOneApiList.forEach(function(apiName) {
    var apiId = apiNameTransform(apiName);
    var clauseNode = document.getElementById(apiId);

    if (clauseNode !== null) {
        var emualgNodeList = clauseNode.getElementsByTagName('emu-alg');
        if (emualgNodeList.length !== 0) {

            var loNodeList = emualgNodeList[0].firstChild;  // 只拿第一个节点
            var _textContent = loNodeList.textContent;
            var result = [..._textContent.matchAll(patternOfNestedFunction)];  // 没匹配到就是空的，也不会报错
            for(var regResult of result) {
                var nestedFunctionName = regResult[1];

                // 存入map中，统计数量
                if (countMap.has(nestedFunctionName)) {
                    var previousCount = countMap.get(nestedFunctionName);
                    countMap.set(nestedFunctionName, previousCount+1);
                } else {
                    countMap.set(nestedFunctionName, 1);
                }
            }

        }

    }

});

// 将统计结果按value的从大到小排序
console.log(countMap);
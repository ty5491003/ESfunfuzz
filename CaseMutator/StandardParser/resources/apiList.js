//包含MDN,es6和es10的API列表
//含手工统计，切勿随意更改删除
//MDN的API列表
var apiList = [
    'Array.from',
    'Array.isArray',
    'Array.observe',
    'Array.of',
    'Array.unobserve',
    'ArrayBuffer.isView',
    'ArrayBuffer.transfer',
    'Atomics.add',
    'Atomics.and',
    'Atomics.compareExchange',
    'Atomics.exchange',
    'Atomics.isLockFree',
    'Atomics.load',
    'Atomics.notify',
    'Atomics.or',
    'Atomics.store',
    'Atomics.wait',
    'getBigInt64',
    'Date.UTC',
    'Date.now',
    'Date.parse',
    'Intl.getCanonicalLocales',
    'JSON.parse',
    'JSON.stringify',
    'Math.abs',
    'Math.acos',
    'Math.acosh',
    'Math.asin',
    'Math.asinh',
    'Math.atan',
    'Math.atan2',
    'Math.atanh',
    'Math.cbrt',
    'Math.ceil',
    'Math.clz32',
    'Math.cos',
    'Math.cosh',
    'Math.exp',
    'Math.expm1',
    'Math.floor',
    'Math.fround',
    'Math.hypot',
    'Math.imul',
    'Math.log',
    'Math.log10',
    'Math.log1p',
    'Math.log2',
    'Math.max',
    'Math.min',
    'Math.pow',
    'Math.random',
    'Math.round',
    'Math.sign',
    'Math.sin',
    'Math.sinh',
    'Math.sqrt',
    'Math.tan',
    'Math.tanh',
    'Math.trunc',
    'Number.isFinite',
    'Number.isInteger',
    'Number.isNaN',
    'Number.isSafeInteger',
    'Number.parseFloat',
    'Number.parseInt',
    'Number.toInteger',
    'Object.assign',
    'Object.create',
    'Object.defineProperties',
    'Object.defineProperty',
    'Object.entries',
    'Object.freeze',
    'Object.fromEntries',
    'Object.getNotifier',
    'Object.getOwnPropertyDescriptor',
    'Object.getOwnPropertyDescriptors',
    'Object.getOwnPropertyNames',
    'Object.getOwnPropertySymbols',
    'Object.getPrototypeOf',
    'Object.is',
    'Object.isExtensible',
    'Object.isFrozen',
    'Object.isSealed',
    'Object.keys',
    'Object.observe',
    'Object.preventExtensions',
    'Object.seal',
    'Object.setPrototypeOf',
    'Object.unobserve',
    'Object.values',
    'Promise.all',
    'Promise.race',
    'Promise.reject',
    'Promise.resolve',
    'Proxy.revocable',
    'handler.apply',
    'handler.construct',
    'handler.defineProperty',
    'handler.deleteProperty',
    'handler.enumerate',
    'handler.get',
    'handler.getOwnPropertyDescriptor',
    'handler.getPrototypeOf',
    'handler.has',
    'handler.isExtensible',
    'handler.ownKeys',
    'handler.preventExtensions',
    'handler.set',
    'handler.setPrototypeOf',
    'Reflect.apply',
    'Reflect.construct',
    'Reflect.defineProperty',
    'Reflect.deleteProperty',
    'Reflect.enumerate',
    'Reflect.get',
    'Reflect.getOwnPropertyDescriptor',
    'Reflect.getPrototypeOf',
    'Reflect.has',
    'Reflect.isExtensible',
    'Reflect.ownKeys',
    'Reflect.preventExtensions',
    'Reflect.set',
    'Reflect.setPrototypeOf',
    'String.fromCharCode',
    'String.fromCodePoint',
    'String.raw',
    'Symbol.for',
    'Symbol.keyFor',
    'TypedArray.from',
    'TypedArray.of',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    'escape',
    'eval',
    'isFinite',
    'isNaN',
    'unescape',
    'uneval',
    'Array.prototype.concat',
    'Array.prototype.copyWithin',
    'Array.prototype.entries',
    'Array.prototype.every',
    'Array.prototype.fill',
    'Array.prototype.filter',
    'Array.prototype.find',
    'Array.prototype.findIndex',
    'Array.prototype.flat',
    'Array.prototype.flatMap',
    'Array.prototype.forEach',
    'Array.prototype.includes',
    'Array.prototype.indexOf',
    'Array.prototype.join',
    'Array.prototype.keys',
    'Array.prototype.lastIndexOf',
    'Array.prototype.map',
    'Array.prototype.pop',
    'Array.prototype.push',
    'Array.prototype.reduce',
    'Array.prototype.reduceRight',
    'Array.prototype.reverse',
    'Array.prototype.shift',
    'Array.prototype.slice',
    'Array.prototype.some',
    'Array.prototype.sort',
    'Array.prototype.splice',
    'Array.prototype.toLocaleString',
    'Array.prototype.toSource',
    'Array.prototype.toString',
    'Array.prototype.unshift',
    'Array.prototype.values',
    'ArrayBuffer.prototype.slice',
    'Boolean.prototype.toSource',
    'Boolean.prototype.toString',
    'Boolean.prototype.valueOf',
    'DataView.prototype.getFloat32',
    'DataView.prototype.getFloat64',
    'DataView.prototype.getInt16',
    'DataView.prototype.getInt32',
    'DataView.prototype.getInt8',
    'DataView.prototype.getUint16',
    'DataView.prototype.getUint32',
    'DataView.prototype.getUint8',
    'DataView.prototype.setFloat32',
    'DataView.prototype.setFloat64',
    'DataView.prototype.setInt16',
    'DataView.prototype.setInt32',
    'DataView.prototype.setInt8',
    'DataView.prototype.setUint16',
    'DataView.prototype.setUint32',
    'DataView.prototype.setUint8',
    'Date.prototype.getDate',
    'Date.prototype.getDay',
    'Date.prototype.getFullYear',
    'Date.prototype.getHours',
    'Date.prototype.getMilliseconds',
    'Date.prototype.getMinutes',
    'Date.prototype.getMonth',
    'Date.prototype.getSeconds',
    'Date.prototype.getTime',
    'Date.prototype.getTimezoneOffset',
    'Date.prototype.getUTCDate',
    'Date.prototype.getUTCDay',
    'Date.prototype.getUTCFullYear',
    'Date.prototype.getUTCHours',
    'Date.prototype.getUTCMilliseconds',
    'Date.prototype.getUTCMinutes',
    'Date.prototype.getUTCMonth',
    'Date.prototype.getUTCSeconds',
    'Date.prototype.getYear',
    'Date.prototype.setDate',
    'Date.prototype.setFullYear',
    'Date.prototype.setHours',
    'Date.prototype.setMilliseconds',
    'Date.prototype.setMinutes',
    'Date.prototype.setMonth',
    'Date.prototype.setSeconds',
    'Date.prototype.setTime',
    'Date.prototype.setUTCDate',
    'Date.prototype.setUTCFullYear',
    'Date.prototype.setUTCHours',
    'Date.prototype.setUTCMilliseconds',
    'Date.prototype.setUTCMinutes',
    'Date.prototype.setUTCMonth',
    'Date.prototype.setUTCSeconds',
    'Date.prototype.setYear',
    'Date.prototype.toDateString',
    'Date.prototype.toGMTString',
    'Date.prototype.toISOString',
    'Date.prototype.toJSON',
    'Date.prototype.toLocaleDateString',
    'Date.prototype.toLocaleFormat',
    'Date.prototype.toLocaleString',
    'Date.prototype.toLocaleTimeString',
    'Date.prototype.toSource',
    'Date.prototype.toString',
    'Date.prototype.toTimeString',
    'Date.prototype.toUTCString',
    'Date.prototype.valueOf',
    'Error.prototype.toSource',
    'Error.prototype.toString',
    'Function.prototype.apply',
    'Function.prototype.bind',
    'Function.prototype.call',
    'Function.prototype.isGenerator',
    'Function.prototype.toSource',
    'Function.prototype.toString',
    'Generator.prototype.next',
    'Generator.prototype.return',
    'Generator.prototype.throw',
    'Map.prototype.clear',
    'Map.prototype.delete',
    'Map.prototype.entries',
    'Map.prototype.forEach',
    'Map.prototype.get',
    'Map.prototype.has',
    'Map.prototype.keys',
    'Map.prototype.set',
    'Map.prototype.values',
    'Number.prototype.toExponential',
    'Number.prototype.toFixed',
    'Number.prototype.toLocaleString',
    'Number.prototype.toPrecision',
    'Number.prototype.toSource',
    'Number.prototype.toString',
    'Number.prototype.valueOf',
    'Object.prototype.__defineGetter__',
    'Object.prototype.__defineSetter__',
    'Object.prototype.__lookupGetter__',
    'Object.prototype.__lookupSetter__',
    'Object.prototype.eval',
    'Object.prototype.hasOwnProperty',
    'Object.prototype.isPrototypeOf',
    'Object.prototype.propertyIsEnumerable',
    'Object.prototype.toLocaleString',
    'Object.prototype.toSource',
    'Object.prototype.toString',
    'Object.prototype.unwatch',
    'Object.prototype.valueOf',
    'Object.prototype.watch',
    'Promise.prototype.allSettled',
    'Promise.prototype.catch',
    'Promise.prototype.finally',
    'Promise.prototype.then',
    'RegExp.prototype.compile',
    'RegExp.prototype.exec',
    'RegExp.prototype.test',
    'RegExp.prototype.toSource',
    'RegExp.prototype.toString',
    'Set.prototype.add',
    'Set.prototype.clear',
    'Set.prototype.delete',
    'Set.prototype.entries',
    'Set.prototype.forEach',
    'Set.prototype.has',
    'Set.prototype.values',
    'SharedArrayBuffer.prototype.slice',
    'String.prototype.anchor',
    'String.prototype.big',
    'String.prototype.blink',
    'String.prototype.bold',
    'String.prototype.charAt',
    'String.prototype.charCodeAt',
    'String.prototype.codePointAt',
    'String.prototype.concat',
    'String.prototype.endsWith',
    'String.prototype.fixed',
    'String.prototype.fontcolor',
    'String.prototype.fontsize',
    'String.prototype.includes',
    'String.prototype.indexOf',
    'String.prototype.italics',
    'String.prototype.lastIndexOf',
    'String.prototype.link',
    'String.prototype.localeCompare',
    'String.prototype.match',
    'String.prototype.matchAll',
    'String.prototype.normalize',
    'String.prototype.padEnd',
    'String.prototype.padStart',
    'String.prototype.quote',
    'String.prototype.repeat',
    'String.prototype.replace',
    'String.prototype.search',
    'String.prototype.slice',
    'String.prototype.small',
    'String.prototype.split',
    'String.prototype.startsWith',
    'String.prototype.strike',
    'String.prototype.sub',
    'String.prototype.substr',
    'String.prototype.substring',
    'String.prototype.sup',
    'String.prototype.toLocaleLowerCase',
    'String.prototype.toLocaleUpperCase',
    'String.prototype.toLowerCase',
    'String.prototype.toSource',
    'String.prototype.toString',
    'String.prototype.toUpperCase',
    'String.prototype.trim',
    'String.prototype.trimLeft',
    'String.prototype.trimRight',
    'String.prototype.valueOf',
    'Symbol.prototype.toSource',
    'Symbol.prototype.toString',
    'Symbol.prototype.valueOf',
    'TypedArray.prototype.copyWithin',
    'TypedArray.prototype.entries',
    'TypedArray.prototype.every',
    'TypedArray.prototype.fill',
    'TypedArray.prototype.filter',
    'TypedArray.prototype.find',
    'TypedArray.prototype.findIndex',
    'TypedArray.prototype.forEach',
    'TypedArray.prototype.includes',
    'TypedArray.prototype.indexOf',
    'TypedArray.prototype.join',
    'TypedArray.prototype.keys',
    'TypedArray.prototype.lastIndexOf',
    'TypedArray.prototype.map',
    'TypedArray.prototype.move',
    'TypedArray.prototype.reduce',
    'TypedArray.prototype.reduceRight',
    'TypedArray.prototype.reverse',
    'TypedArray.prototype.set',
    'TypedArray.prototype.slice',
    'TypedArray.prototype.some',
    'TypedArray.prototype.sort',
    'TypedArray.prototype.subarray',
    'TypedArray.prototype.toLocaleString',
    'TypedArray.prototype.toString',
    'TypedArray.prototype.values',
    'WeakMap.prototype.clear',
    'WeakMap.prototype.delete',
    'WeakMap.prototype.get',
    'WeakMap.prototype.has',
    'WeakMap.prototype.set',
    'WeakSet.prototype.add',
    'WeakSet.prototype.clear',
    'WeakSet.prototype.delete',
    'WeakSet.prototype.has',
];

// es6的API列表,共389个
var apiList_es6 = [
    //文本描述的API_start
    'Number.parseFloat ( string )',
    'Number.parseInt ( string, radix )',
    'Number.prototype.toLocaleString( [ reserved1 [ , reserved2 ] ] )',
    'Date.now ( )',
    'Date.parse ( string )',
    'Date.prototype.toDateString ( )',
    'Date.prototype.toISOString ( )',
    'Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.prototype.toTimeString ( )',
    'Date.prototype.toUTCString ( )',
    'Date.prototype.valueOf ( )',
    'String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )',
    'String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )',
    'String.prototype.toUpperCase ( )',
    'Array.prototype [ @@iterator ] ( )',
    '%TypedArray%.prototype.copyWithin (target, start [, end ] )',
    '%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.fill (value [ , start [ , end ] ] )',
    '%TypedArray%.prototype.find (predicate [ , thisArg ] )',
    '%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )',
    '%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )',
    '%TypedArray%.prototype.join ( separator )',
    '%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )',
    '%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )',
    '%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )',
    '%TypedArray%.prototype.reverse ( )',
    '%TypedArray%.prototype.set ( overloaded [ , offset ] )',
    '%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ] )',
    '%TypedArray%.prototype.toString ( )',
    '%TypedArray%.prototype [ @@iterator ] ( )',
    'Map.prototype [ @@iterator ]( )',
    'Set.prototype.keys ( )',
    'Set.prototype [ @@iterator ] ( )',
    //文本描述的API_end
    'eval (x )',
    'isFinite (number )',
    'isNaN (number )',
    'parseFloat (string )',
    'parseInt (string , radix )',
    'decodeURI (encodedURI )',
    'decodeURIComponent (encodedURIComponent )',
    'encodeURI (uri )',
    'encodeURIComponent (uriComponent )',
    'Object ( [ value ] )',
    'Object.assign ( target, ...sources )',
    'Object.create ( O [ , Properties ] )',
    'Object.defineProperties ( O, Properties )',
    'Object.defineProperty ( O, P, Attributes )',
    'Object.freeze ( O )',
    'Object.getOwnPropertyDescriptor ( O, P )',
    'Object.getOwnPropertyNames ( O )',
    'Object.getOwnPropertySymbols ( O )',
    'Object.getPrototypeOf ( O )',
    'Object.is ( value1, value2 )',
    'Object.isExtensible ( O )',
    'Object.isFrozen ( O )',
    'Object.isSealed ( O )',
    'Object.keys ( O )',
    'Object.preventExtensions ( O )',
    'Object.seal ( O )',
    'Object.setPrototypeOf ( O, proto )',
    'Object.prototype.hasOwnProperty ( V )',
    'Object.prototype.isPrototypeOf ( V )',
    'Object.prototype.propertyIsEnumerable ( V )',
    'Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Object.prototype.toString ( )',
    'Object.prototype.valueOf ( )',
    'Function ( p1, p2, … , pn, body )',
    'Function.prototype.apply ( thisArg, argArray )',
    'Function.prototype.bind ( thisArg , ...args )',
    'Function.prototype.call (thisArg , ...args )',
    'Function.prototype.toString ( )',
    'Function.prototype[@@hasInstance] ( V )',
    'Boolean ( value )',
    'Boolean.prototype.toString ( )',
    'Boolean.prototype.valueOf ( )',
    'Symbol ( [ description ] )',
    'Symbol.for ( key )',
    'Symbol.keyFor ( sym )',
    'Symbol.prototype.toString ( )',
    'Symbol.prototype.valueOf ( )',
    'Symbol.prototype [ @@toPrimitive ] ( hint )',
    'Error ( message )',
    'Error.prototype.toString ( )',
    'NativeError ( message )',
    'Number ( [ value ] )',
    'Number.isFinite ( number )',
    'Number.isInteger ( number )',
    'Number.isNaN ( number )',
    'Number.isSafeInteger ( number )',
    'Number.prototype.toExponential ( fractionDigits )',
    'Number.prototype.toFixed ( fractionDigits )',
    'Number.prototype.toPrecision ( precision )',
    'Number.prototype.toString ( [ radix ] )',
    'Number.prototype.valueOf ( )',
    'Math.random ( )',
    'Math.abs ( x )',
    'Math.acos ( x )',
    'Math.acosh( x )',
    'Math.asin ( x )',
    'Math.asinh( x )',
    'Math.atan ( x )',
    'Math.atanh( x )',
    'Math.atan2 ( y, x )',
    'Math.cbrt ( x )',
    'Math.ceil ( x )',
    'Math.clz32 ( x )',
    'Math.cos ( x )',
    'Math.cosh ( x )',
    'Math.exp ( x )',
    'Math.expm1 ( x )',
    'Math.floor ( x )',
    'Math.fround ( x )',
    'Math.hypot ( value1 , value2 , ...values )',
    'Math.imul ( x, y )',
    'Math.log ( x )',
    'Math.log1p ( x )',
    'Math.log10 ( x )',
    'Math.log2 ( x )',
    'Math.max ( value1, value2 , ...values )',
    'Math.min ( value1, value2 ,...values )',
    'Math.pow ( x, y )',
    'Math.round ( x )',
    'Math.sign(x )',
    'Math.sin ( x )',
    'Math.sinh( x )',
    'Math.sqrt ( x )',
    'Math.tan ( x )',
    'Math.tanh ( x )',
    'Math.trunc ( x )',
    'Date ( year, month [, date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )',
    'Date ( value )',
    'Date ( )',
    'Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )',
    'Date.prototype.toGMTString ( )',
    'Date.prototype.getDate ( )',
    'Date.prototype.getDay ( )',
    'Date.prototype.getFullYear ( )',
    'Date.prototype.getHours ( )',
    'Date.prototype.getMilliseconds ( )',
    'Date.prototype.getMinutes ( )',
    'Date.prototype.getMonth ( )',
    'Date.prototype.getSeconds ( )',
    'Date.prototype.getTime ( )',
    'Date.prototype.getTimezoneOffset ( )',
    'Date.prototype.getUTCDate ( )',
    'Date.prototype.getUTCDay ( )',
    'Date.prototype.getUTCFullYear ( )',
    'Date.prototype.getUTCHours ( )',
    'Date.prototype.getUTCMilliseconds ( )',
    'Date.prototype.getUTCMinutes ( )',
    'Date.prototype.getUTCMonth ( )',
    'Date.prototype.getUTCSeconds ( )',
    'Date.prototype.setDate ( date )',
    'Date.prototype.setFullYear ( year [ , month [ , date ] ] )',
    'Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )',
    'Date.prototype.setMilliseconds ( ms )',
    'Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )',
    'Date.prototype.setMonth ( month [ , date ] )',
    'Date.prototype.setSeconds ( sec [ , ms ] )',
    'Date.prototype.setTime ( time )',
    'Date.prototype.setUTCDate ( date )',
    'Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )',
    'Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )',
    'Date.prototype.setUTCMilliseconds ( ms )',
    'Date.prototype.setUTCMinutes ( min [ , sec [, ms ] ] )',
    'Date.prototype.setUTCMonth ( month [ , date ] )',
    'Date.prototype.setUTCSeconds ( sec [ , ms ] )',
    'Date.prototype.toJSON ( key )',
    'Date.prototype.toString ( )',
    'Date.prototype [ @@toPrimitive ] ( hint )',
    'String ( value )',
    'String.fromCharCode ( ...codeUnits )',
    'String.fromCodePoint ( ...codePoints )',
    'String.raw ( template , ...substitutions )',
    'String.prototype.charAt ( pos )',
    'String.prototype.charCodeAt ( pos )',
    'String.prototype.codePointAt ( pos )',
    'String.prototype.concat ( ...args )',
    'String.prototype.endsWith ( searchString [ , endPosition] )',
    'String.prototype.includes ( searchString [ , position ] )',
    'String.prototype.indexOf ( searchString [ , position ] )',
    'String.prototype.lastIndexOf ( searchString [ , position ] )',
    'String.prototype.localeCompare ( that [, reserved1 [ , reserved2 ] ] )',
    'String.prototype.match ( regexp )',
    'String.prototype.normalize ( [ form ] )',
    'String.prototype.repeat ( count )',
    'String.prototype.replace (searchValue, replaceValue )',
    'String.prototype.search ( regexp )',
    'String.prototype.slice ( start, end )',
    'String.prototype.split ( separator, limit )',
    'String.prototype.startsWith ( searchString [, position ] )',
    'String.prototype.substring ( start, end )',
    'String.prototype.toLowerCase ( )',
    'String.prototype.toString ( )',
    'String.prototype.trim ( )',
    'String.prototype.valueOf ( )',
    'String.prototype [ @@iterator ]( )',
    '%StringIteratorPrototype%.next ( )',
    'RegExp ( pattern, flags )',
    'RegExp.prototype.exec ( string )',
    'RegExp.prototype [ @@match ] ( string )',
    'RegExp.prototype [ @@replace ] ( string, replaceValue )',
    'RegExp.prototype [ @@search ] ( string )',
    'RegExp.prototype [ @@split ] ( string, limit )',
    'RegExp.prototype.test( S )',
    'RegExp.prototype.toString ( )',
    'Array ( )',
    'Array (len )',
    'Array (...items )',
    'Array.from ( items [ , mapfn [ , thisArg ] ] )',
    'Array.isArray ( arg )',
    'Array.of ( ...items )',
    'Array.prototype.concat ( ...arguments )',
    'Array.prototype.copyWithin (target, start [ , end ] )',
    'Array.prototype.entries ( )',
    'Array.prototype.every ( callbackfn [ , thisArg] )',
    'Array.prototype.fill (value [ , start [ , end ] ] )',
    'Array.prototype.filter ( callbackfn [ , thisArg ] )',
    'Array.prototype.find ( predicate [ , thisArg ] )',
    'Array.prototype.findIndex ( predicate [ , thisArg ] )',
    'Array.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Array.prototype.indexOf ( searchElement [ , fromIndex ] )',
    'Array.prototype.join (separator )',
    'Array.prototype.keys ( )',
    'Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )',
    'Array.prototype.map ( callbackfn [ , thisArg ] )',
    'Array.prototype.pop ( )',
    'Array.prototype.push ( ...items )',
    'Array.prototype.reduce ( callbackfn [ , initialValue ] )',
    'Array.prototype.reduceRight ( callbackfn [ , initialValue ] )',
    'Array.prototype.reverse ( )',
    'Array.prototype.shift ( )',
    'Array.prototype.slice (start, end )',
    'Array.prototype.some ( callbackfn [ , thisArg ] )',
    'Array.prototype.sort (comparefn )',
    'Array.prototype.splice (start, deleteCount , ...items )',
    'Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Array.prototype.toString ( )',
    'Array.prototype.unshift ( ...items )',
    'Array.prototype.values ( )',
    '%ArrayIteratorPrototype%.next( )',
    '%TypedArray% ( )',
    '%TypedArray% ( length )',
    '%TypedArray% ( typedArray )',
    '%TypedArray% ( object )',
    '%TypedArray% ( buffer [ , byteOffset [ , length ] ] )',
    '%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )',
    '%TypedArray%.of ( ...items )',
    '%TypedArray%.prototype.entries ( )',
    '%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.keys ( )',
    '%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.set (array [ , offset ] )',
    '%TypedArray%.prototype.set(typedArray [, offset ] )',
    '%TypedArray%.prototype.slice ( start, end )',
    '%TypedArray%.prototype.sort ( comparefn )',
    '%TypedArray%.prototype.subarray( [ begin [ , end ] ] )',
    '%TypedArray%.prototype.values ( )',
    'TypedArray( ... argumentsList )',
    'Map ( [ iterable ] )',
    'Map.prototype.clear ( )',
    'Map.prototype.delete ( key )',
    'Map.prototype.entries ( )',
    'Map.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Map.prototype.get ( key )',
    'Map.prototype.has ( key )',
    'Map.prototype.keys ( )',
    'Map.prototype.set ( key , value )',
    'Map.prototype.values ( )',
    '%MapIteratorPrototype%.next ( )',
    'Set ( [ iterable ] )',
    'Set.prototype.add ( value )',
    'Set.prototype.clear ( )',
    'Set.prototype.delete ( value )',
    'Set.prototype.entries ( )',
    'Set.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Set.prototype.has ( value )',
    'Set.prototype.values ( )',
    '%SetIteratorPrototype%.next ( )',
    'WeakMap ( [ iterable ] )',
    'WeakMap.prototype.delete ( key )',
    'WeakMap.prototype.get ( key )',
    'WeakMap.prototype.has ( key )',
    'WeakMap.prototype.set ( key , value )',
    'WeakSet ( [ iterable ] )',
    'WeakSet.prototype.add ( value )',
    'WeakSet.prototype.delete ( value )',
    'WeakSet.prototype.has ( value )',
    'ArrayBuffer( length )',
    'ArrayBuffer.isView ( arg )',
    'ArrayBuffer.prototype.slice ( start, end )',
    'DataView (buffer [ , byteOffset [ , byteLength ] ] )',
    'DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getInt8 ( byteOffset )',
    'DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getUint8 ( byteOffset )',
    'DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setInt8 ( byteOffset, value )',
    'DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setUint8 ( byteOffset, value )',
    'DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )',
    'JSON.parse ( text [ , reviver ] )',
    'JSON.stringify ( value [ , replacer [ , space ] ] )',
    '%IteratorPrototype% [ @@iterator ] ( )',
    'GeneratorFunction (p1, p2, … , pn, body )',
    'Generator.prototype.next ( value )',
    'Generator.prototype.return ( value )',
    'Generator.prototype.throw ( exception )',
    'Promise ( executor )',
    'Promise.all ( iterable )',
    'Promise.race ( iterable )',
    'Promise.reject ( r )',
    'Promise.resolve ( x )',
    'Promise.prototype.catch ( onRejected )',
    'Promise.prototype.then ( onFulfilled , onRejected )',
    'Reflect.apply ( target, thisArgument, argumentsList )',
    'Reflect.construct ( target, argumentsList [, newTarget] )',
    'Reflect.defineProperty ( target, propertyKey, attributes )',
    'Reflect.deleteProperty ( target, propertyKey )',
    'Reflect.enumerate ( target )',
    'Reflect.get ( target, propertyKey [ , receiver ] )',
    'Reflect.getOwnPropertyDescriptor ( target, propertyKey )',
    'Reflect.getPrototypeOf ( target )',
    'Reflect.has ( target, propertyKey )',
    'Reflect.isExtensible (target )',
    'Reflect.ownKeys ( target )',
    'Reflect.preventExtensions ( target )',
    'Reflect.set ( target, propertyKey, V [ , receiver ] )',
    'Reflect.setPrototypeOf ( target, proto )',
    'Proxy ( target, handler )',
    'Proxy.revocable ( target, handler )',
    '[ @@iterator ] ( )',
    'escape (string )',
    'unescape (string )',
    'String.prototype.substr (start, length )',
    'String.prototype.anchor ( name )',
    'String.prototype.big ( )',
    'String.prototype.blink ( )',
    'String.prototype.bold ( )',
    'String.prototype.fixed ( )',
    'String.prototype.fontcolor ( color )',
    'String.prototype.fontsize ( size )',
    'String.prototype.italics ( )',
    'String.prototype.link ( url )',
    'String.prototype.small ( )',
    'String.prototype.strike ( )',
    'String.prototype.sub ( )',
    'String.prototype.sup ( )',
    'Date.prototype.getYear ( )',
    'Date.prototype.setYear (year )',
    'RegExp.prototype.compile (pattern, flags )',
];

// es10的API列表
var apiList_es10 = [
    // 文字描述的API_start
    'Number.parseFloat ( string )',
    'Number.parseInt ( string, radix )',
    'Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.now ( )',
    'Date.parse ( string )',
    'Date.prototype.toISOString ( )',
    'Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )',
    'String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )',
    'String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )',
    'String.prototype.toUpperCase ( )',
    '%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.find ( predicate [ , thisArg ] )',
    '%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )',
    '%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )',
    '%TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )',
    '%TypedArray%.prototype.join ( separator )',
    '%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )',
    '%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )',
    '%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )',
    '%TypedArray%.prototype.reverse ( )',
    '%TypedArray%.prototype.set ( overloaded [ , offset ] )',
    '%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    '%TypedArray%.prototype.toString ( )',
    'Set.prototype.keys ( )',
    'String.prototype.trimLeft ( )',
    'String.prototype.trimRight ( )',
    'Date.prototype.toGMTString ( )',
    'Array.prototype [ @@iterator ] ( )',
    '%TypedArray%.prototype [ @@iterator ] ( )',
    'Map.prototype [ @@iterator ] ( )',
    'Set.prototype [ @@iterator ] ( )',
    //文字描述的API_end
    'eval ( x )',
    'isFinite ( number )',
    'isNaN ( number )',
    'parseFloat ( string )',
    'parseInt ( string, radix )',
    'decodeURI ( encodedURI )',
    'decodeURIComponent ( encodedURIComponent )',
    'encodeURI ( uri )',
    'encodeURIComponent ( uriComponent )',
    'Object ( [ value ] )',
    'Object.assign ( target, ...sources )',
    'Object.create ( O, Properties )',
    'Object.defineProperties ( O, Properties )',
    'Object.defineProperty ( O, P, Attributes )',
    'Object.entries ( O )',
    'Object.freeze ( O )',
    'Object.fromEntries ( iterable )',
    'Object.getOwnPropertyDescriptor ( O, P )',
    'Object.getOwnPropertyDescriptors ( O )',
    'Object.getOwnPropertyNames ( O )',
    'Object.getOwnPropertySymbols ( O )',
    'Object.getPrototypeOf ( O )',
    'Object.is ( value1, value2 )',
    'Object.isExtensible ( O )',
    'Object.isFrozen ( O )',
    'Object.isSealed ( O )',
    'Object.keys ( O )',
    'Object.preventExtensions ( O )',
    'Object.seal ( O )',
    'Object.setPrototypeOf ( O, proto )',
    'Object.values ( O )',
    'Object.prototype.hasOwnProperty ( V )',
    'Object.prototype.isPrototypeOf ( V )',
    'Object.prototype.propertyIsEnumerable ( V )',
    'Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Object.prototype.toString ( )',
    'Object.prototype.valueOf ( )',
    'Function ( p1, p2, … , pn, body )',
    'Function.prototype.apply ( thisArg, argArray )',
    'Function.prototype.bind ( thisArg, ...args )',
    'Function.prototype.call ( thisArg, ...args )',
    'Function.prototype.toString ( )',
    'Boolean ( value )',
    'Boolean.prototype.toString ( )',
    'Boolean.prototype.valueOf ( )',
    'Symbol ( [ description ] )',
    'Symbol.for ( key )',
    'Symbol.keyFor ( sym )',
    'Symbol.prototype.toString ( )',
    'Symbol.prototype.valueOf ( )',
    'Error ( message )',
    'Error.prototype.toString ( )',
    'NativeError ( message )',
    'Number ( value )',
    'Number.isFinite ( number )',
    'Number.isInteger ( number )',
    'Number.isNaN ( number )',
    'Number.isSafeInteger ( number )',
    'Number.prototype.toExponential ( fractionDigits )',
    'Number.prototype.toFixed ( fractionDigits )',
    'Number.prototype.toPrecision ( precision )',
    'Number.prototype.toString ( [ radix ] )',
    'Number.prototype.valueOf ( )',
    'Math.clz32 ( x )',
    'Math.fround ( x )',
    'Math.imul ( x, y )',
    'Math.abs ( x )',
    'Math.acos ( x )',
    'Math.acosh ( x )',
    'Math.asin ( x )',
    'Math.asinh ( x )',
    'Math.atan ( x )',
    'Math.atanh ( x )',
    'Math.atan2 ( y, x )',
    'Math.cbrt ( x )',
    'Math.ceil ( x )',
    'Math.cos ( x )',
    'Math.cosh ( x )',
    'Math.exp ( x )',
    'Math.expm1 ( x )',
    'Math.floor ( x )',
    'Math.hypot ( value1, value2, ...values )',
    'Math.log ( x )',
    'Math.log1p ( x )',
    'Math.log10 ( x )',
    'Math.log2 ( x )',
    'Math.max ( value1, value2, ...values )',
    'Math.min ( value1, value2, ...values )',
    'Math.random ( )',
    'Math.round ( x )',
    'Math.sign ( x )',
    'Math.sin ( x )',
    'Math.sinh ( x )',
    'Math.sqrt ( x )',
    'Math.tan ( x )',
    'Math.tanh ( x )',
    'Math.trunc ( x )',
    'Math.pow ( base, exponent )',
    'Date ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )',
    'Date ( value )',
    'Date ( )',
    'Date.UTC ( year [ , month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] ] )',
    'Date.prototype.getDate ( )',
    'Date.prototype.getDay ( )',
    'Date.prototype.getFullYear ( )',
    'Date.prototype.getHours ( )',
    'Date.prototype.getMilliseconds ( )',
    'Date.prototype.getMinutes ( )',
    'Date.prototype.getMonth ( )',
    'Date.prototype.getSeconds ( )',
    'Date.prototype.getTime ( )',
    'Date.prototype.getTimezoneOffset ( )',
    'Date.prototype.getUTCDate ( )',
    'Date.prototype.getUTCDay ( )',
    'Date.prototype.getUTCFullYear ( )',
    'Date.prototype.getUTCHours ( )',
    'Date.prototype.getUTCMilliseconds ( )',
    'Date.prototype.getUTCMinutes ( )',
    'Date.prototype.getUTCMonth ( )',
    'Date.prototype.getUTCSeconds ( )',
    'Date.prototype.setDate ( date )',
    'Date.prototype.setFullYear ( year [ , month [ , date ] ] )',
    'Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )',
    'Date.prototype.setMilliseconds ( ms )',
    'Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )',
    'Date.prototype.setMonth ( month [ , date ] )',
    'Date.prototype.setSeconds ( sec [ , ms ] )',
    'Date.prototype.setTime ( time )',
    'Date.prototype.setUTCDate ( date )',
    'Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )',
    'Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )',
    'Date.prototype.setUTCMilliseconds ( ms )',
    'Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )',
    'Date.prototype.setUTCMonth ( month [ , date ] )',
    'Date.prototype.setUTCSeconds ( sec [ , ms ] )',
    'Date.prototype.toDateString ( )',
    'Date.prototype.toJSON ( key )',
    'Date.prototype.toString ( )',
    'Date.prototype.toTimeString ( )',
    'Date.prototype.toUTCString ( )',
    'Date.prototype.valueOf ( )',
    'String ( value )',
    'String.fromCharCode ( ...codeUnits )',
    'String.fromCodePoint ( ...codePoints )',
    'String.raw ( template, ...substitutions )',
    'String.prototype.charAt ( pos )',
    'String.prototype.charCodeAt ( pos )',
    'String.prototype.codePointAt ( pos )',
    'String.prototype.concat ( ...args )',
    'String.prototype.endsWith ( searchString [ , endPosition ] )',
    'String.prototype.includes ( searchString [ , position ] )',
    'String.prototype.indexOf ( searchString [ , position ] )',
    'String.prototype.lastIndexOf ( searchString [ , position ] )',
    'String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )',
    'String.prototype.match ( regexp )',
    'String.prototype.normalize ( [ form ] )',
    'String.prototype.padEnd ( maxLength [ , fillString ] )',
    'String.prototype.padStart ( maxLength [ , fillString ] )',
    'String.prototype.repeat ( count )',
    'String.prototype.replace ( searchValue, replaceValue )',
    'String.prototype.search ( regexp )',
    'String.prototype.slice ( start, end )',
    'String.prototype.split ( separator, limit )',
    'String.prototype.startsWith ( searchString [ , position ] )',
    'String.prototype.substring ( start, end )',
    'String.prototype.toLowerCase ( )',
    'String.prototype.toString ( )',
    'String.prototype.trim ( )',
    'String.prototype.trimEnd ( )',
    'String.prototype.trimStart ( )',
    'String.prototype.valueOf ( )',
    '%StringIteratorPrototype%.next ( )',
    'RegExp ( pattern, flags )',
    'RegExp.prototype.exec ( string )',
    'RegExp.prototype.test ( S )',
    'RegExp.prototype.toString ( )',
    'Array ( )',
    'Array ( len )',
    'Array ( ...items )',
    'Array.from ( items [ , mapfn [ , thisArg ] ] )',
    'Array.isArray ( arg )',
    'Array.of ( ...items )',
    'Array.prototype.concat ( ...arguments )',
    'Array.prototype.copyWithin ( target, start [ , end ] )',
    'Array.prototype.entries ( )',
    'Array.prototype.every ( callbackfn [ , thisArg ] )',
    'Array.prototype.fill ( value [ , start [ , end ] ] )',
    'Array.prototype.filter ( callbackfn [ , thisArg ] )',
    'Array.prototype.find ( predicate [ , thisArg ] )',
    'Array.prototype.findIndex ( predicate [ , thisArg ] )',
    'Array.prototype.flat( [ depth ] )',
    'Array.prototype.flatMap ( mapperFunction [ , thisArg ] )',
    'Array.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Array.prototype.includes ( searchElement [ , fromIndex ] )',
    'Array.prototype.indexOf ( searchElement [ , fromIndex ] )',
    'Array.prototype.join ( separator )',
    'Array.prototype.keys ( )',
    'Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )',
    'Array.prototype.map ( callbackfn [ , thisArg ] )',
    'Array.prototype.pop ( )',
    'Array.prototype.push ( ...items )',
    'Array.prototype.reduce ( callbackfn [ , initialValue ] )',
    'Array.prototype.reduceRight ( callbackfn [ , initialValue ] )',
    'Array.prototype.reverse ( )',
    'Array.prototype.shift ( )',
    'Array.prototype.slice ( start, end )',
    'Array.prototype.some ( callbackfn [ , thisArg ] )',
    'Array.prototype.sort ( comparefn )',
    'Array.prototype.splice ( start, deleteCount, ...items )',
    'Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )',
    'Array.prototype.toString ( )',
    'Array.prototype.unshift ( ...items )',
    'Array.prototype.values ( )',
    '%ArrayIteratorPrototype%.next ( )',
    '%TypedArray% ( )',
    '%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )',
    '%TypedArray%.of ( ...items )',
    '%TypedArray%.prototype.copyWithin ( target, start [ , end ] )',
    '%TypedArray%.prototype.entries ( )',
    '%TypedArray%.prototype.fill ( value [ , start [ , end ] ] )',
    '%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.keys ( )',
    '%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )',
    '%TypedArray%.prototype.set ( array [ , offset ] )',
    '%TypedArray%.prototype.set ( typedArray [ , offset ] )',
    '%TypedArray%.prototype.slice ( start, end )',
    '%TypedArray%.prototype.sort ( comparefn )',
    '%TypedArray%.prototype.subarray ( begin, end )',
    '%TypedArray%.prototype.values ( )',
    'TypedArray ( )',
    'TypedArray ( length )',
    'TypedArray ( typedArray )',
    'TypedArray ( object )',
    'TypedArray ( buffer [ , byteOffset [ , length ] ] )',
    'Map ( [ iterable ] )',
    'Map.prototype.clear ( )',
    'Map.prototype.delete ( key )',
    'Map.prototype.entries ( )',
    'Map.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Map.prototype.get ( key )',
    'Map.prototype.has ( key )',
    'Map.prototype.keys ( )',
    'Map.prototype.set ( key, value )',
    'Map.prototype.values ( )',
    '%MapIteratorPrototype%.next ( )',
    'Set ( [ iterable ] )',
    'Set.prototype.add ( value )',
    'Set.prototype.clear ( )',
    'Set.prototype.delete ( value )',
    'Set.prototype.entries ( )',
    'Set.prototype.forEach ( callbackfn [ , thisArg ] )',
    'Set.prototype.has ( value )',
    'Set.prototype.values ( )',
    '%SetIteratorPrototype%.next ( )',
    'WeakMap ( [ iterable ] )',
    'WeakMap.prototype.delete ( key )',
    'WeakMap.prototype.get ( key )',
    'WeakMap.prototype.has ( key )',
    'WeakMap.prototype.set ( key, value )',
    'WeakSet ( [ iterable ] )',
    'WeakSet.prototype.add ( value )',
    'WeakSet.prototype.delete ( value )',
    'WeakSet.prototype.has ( value )',
    'ArrayBuffer ( length )',
    'ArrayBuffer.isView ( arg )',
    'ArrayBuffer.prototype.slice ( start, end )',
    'SharedArrayBuffer ( [ length ] )',
    'SharedArrayBuffer.prototype.slice ( start, end )',
    'DataView ( buffer [ , byteOffset [ , byteLength ] ] )',
    'DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getInt8 ( byteOffset )',
    'DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getUint8 ( byteOffset )',
    'DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )',
    'DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setInt8 ( byteOffset, value )',
    'DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setUint8 ( byteOffset, value )',
    'DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )',
    'DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )',
    'Atomics.add ( typedArray, index, value )',
    'Atomics.and ( typedArray, index, value )',
    'Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )',
    'Atomics.exchange ( typedArray, index, value )',
    'Atomics.isLockFree ( size )',
    'Atomics.load ( typedArray, index )',
    'Atomics.or ( typedArray, index, value )',
    'Atomics.store ( typedArray, index, value )',
    'Atomics.sub ( typedArray, index, value )',
    'Atomics.wait ( typedArray, index, value, timeout )',
    'Atomics.notify ( typedArray, index, count )',
    'Atomics.xor ( typedArray, index, value )',
    'JSON.parse ( text [ , reviver ] )',
    'JSON.stringify ( value [ , replacer [ , space ] ] )',
    '%AsyncFromSyncIteratorPrototype%.next ( value )',
    '%AsyncFromSyncIteratorPrototype%.return ( value )',
    '%AsyncFromSyncIteratorPrototype%.throw ( value )',
    'GeneratorFunction ( p1, p2, … , pn, body )',
    'AsyncGeneratorFunction ( p1, p2, ..., pn, body )',
    'Generator.prototype.next ( value )',
    'Generator.prototype.return ( value )',
    'Generator.prototype.throw ( exception )',
    'AsyncGenerator.prototype.next ( value )',
    'AsyncGenerator.prototype.return ( value )',
    'AsyncGenerator.prototype.throw ( exception )',
    'Promise ( executor )',
    'Promise.all ( iterable )',
    'Promise.race ( iterable )',
    'Promise.reject ( r )',
    'Promise.resolve ( x )',
    'Promise.prototype.catch ( onRejected )',
    'Promise.prototype.finally ( onFinally )',
    'Promise.prototype.then ( onFulfilled, onRejected )',
    'AsyncFunction ( p1, p2, … , pn, body )',
    'Reflect.apply ( target, thisArgument, argumentsList )',
    'Reflect.construct ( target, argumentsList [ , newTarget ] )',
    'Reflect.defineProperty ( target, propertyKey, attributes )',
    'Reflect.deleteProperty ( target, propertyKey )',
    'Reflect.get ( target, propertyKey [ , receiver ] )',
    'Reflect.getOwnPropertyDescriptor ( target, propertyKey )',
    'Reflect.getPrototypeOf ( target )',
    'Reflect.has ( target, propertyKey )',
    'Reflect.isExtensible ( target )',
    'Reflect.ownKeys ( target )',
    'Reflect.preventExtensions ( target )',
    'Reflect.set ( target, propertyKey, V [ , receiver ] )',
    'Reflect.setPrototypeOf ( target, proto )',
    'Proxy ( target, handler )',
    'Proxy.revocable ( target, handler )',
    'escape ( string )',
    'unescape ( string )',
    'Object.prototype.__defineGetter__ ( P, getter )',
    'Object.prototype.__defineSetter__ ( P, setter )',
    'Object.prototype.__lookupGetter__ ( P )',
    'Object.prototype.__lookupSetter__ ( P )',
    'String.prototype.substr ( start, length )',
    'String.prototype.anchor ( name )',
    'String.prototype.big ( )',
    'String.prototype.blink ( )',
    'String.prototype.bold ( )',
    'String.prototype.fixed ( )',
    'String.prototype.fontcolor ( color )',
    'String.prototype.fontsize ( size )',
    'String.prototype.italics ( )',
    'String.prototype.link ( url )',
    'String.prototype.small ( )',
    'String.prototype.strike ( )',
    'String.prototype.sub ( )',
    'String.prototype.sup ( )',
    'Date.prototype.getYear ( )',
    'Date.prototype.setYear ( year )',
    'RegExp.prototype.compile ( pattern, flags )',
    'Object.values(O)',
    'Function.prototype [ @@hasInstance ] ( V )',
    'Symbol.prototype [ @@toPrimitive ] ( hint )',
    'Date.prototype [ @@toPrimitive ] ( hint )',
    'String.prototype [ @@iterator ] ( )',
    'RegExp.prototype [ @@match ] ( string )',
    'RegExp.prototype [ @@replace ] ( string, replaceValue )',
    'RegExp.prototype [ @@search ] ( string )',
    'RegExp.prototype [ @@split ] ( string, limit )',
    '%IteratorPrototype% [ @@iterator ] ( )',
    '%AsyncIteratorPrototype% [ @@asyncIterator ] ( )',
];

var OnlyInES10 = [
    '%TypedArray%.prototype.includes(searchElement[,fromIndex])',
    'String.prototype.trimLeft()',
    'String.prototype.trimRight()',
    'Object.entries(O)',
    'Object.fromEntries(iterable)',
    'Object.getOwnPropertyDescriptors(O)',
    'String.prototype.padEnd(maxLength[,fillString])',
    'String.prototype.padStart(maxLength[,fillString])',
    'String.prototype.trimEnd()',
    'String.prototype.trimStart()',
    'Array.prototype.flat([depth])',
    'Array.prototype.flatMap(mapperFunction[,thisArg])',
    'Array.prototype.includes(searchElement[,fromIndex])',
    'TypedArray()',
    'TypedArray(length)',
    'TypedArray(typedArray)',
    'TypedArray(object)',
    'TypedArray(buffer[,byteOffset[,length]])',
    'SharedArrayBuffer([length])',
    'SharedArrayBuffer.prototype.slice(start,end)',
    'Atomics.add(typedArray,index,value)',
    'Atomics.and(typedArray,index,value)',
    'Atomics.compareExchange(typedArray,index,expectedValue,replacementValue)',
    'Atomics.exchange(typedArray,index,value)',
    'Atomics.isLockFree(size)',
    'Atomics.load(typedArray,index)',
    'Atomics.or(typedArray,index,value)',
    'Atomics.store(typedArray,index,value)',
    'Atomics.sub(typedArray,index,value)',
    'Atomics.wait(typedArray,index,value,timeout)',
    'Atomics.notify(typedArray,index,count)',
    'Atomics.xor(typedArray,index,value)',
    '%AsyncFromSyncIteratorPrototype%.next(value)',
    '%AsyncFromSyncIteratorPrototype%.return(value)',
    '%AsyncFromSyncIteratorPrototype%.throw(value)',
    'AsyncGeneratorFunction(p1,p2,...,pn,body)',
    'AsyncGenerator.prototype.next(value)',
    'AsyncGenerator.prototype.return(value)',
    'AsyncGenerator.prototype.throw(exception)',
    'Object.prototype.__defineGetter__(P,getter)',
    'Object.prototype.__defineSetter__(P,setter)',
    'Object.prototype.__lookupGetter__(P)',
    'Object.prototype.__lookupSetter__(P)',
    '%AsyncIteratorPrototype%[@@asyncIterator]()'
];

var OnlyInEs6 = [
    '%TypedArray%(length)',
    '%TypedArray%(typedArray)',
    '%TypedArray%(object)',
    '%TypedArray%(buffer[,byteOffset[,length]])',
    '%TypedArray%.prototype.subarray([begin[,end]])',
    'TypedArray(...argumentsList)',
    'Reflect.enumerate(target)',
    '[@@iterator]()'
];

// API名称相同，只是参数不同
var DifferentArgs = [
    // es10
    'Object.create(O,Properties)',
    'Number(value)',
    'Math.pow(base,exponent)',
    'Date.UTC(year[,month[,date[,hours[,minutes[,seconds[,ms]]]]]])',
    '%TypedArray%.prototype.subarray(begin,end)',
    //es6
    '%TypedArray% ( length )',
    '%TypedArray% ( typedArray )',
    '%TypedArray% ( object )',
    '%TypedArray% ( buffer [ , byteOffset [ , length ] ] )',
    'TypedArray(...argumentsList)'
];

exports.apiList_es10 = apiList_es10;
exports.apiList_es6 = apiList_es6;
exports.apiList = apiList;